{"version":3,"sources":["components/ColorWheel.js","App.js","serviceWorker.js","index.js"],"names":["Radial","_ref2","rotation","react_default","a","createElement","className","style","transform","concat","backgroundColor","ColorWheel","_ref","numberOfRadials","reverse","Array","from","map","_","i","ColorWheel_Radial","key","App","src_components_ColorWheel","App_About","About","href","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAYaA,cAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACpBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVC,MAAO,CACLC,UAAS,UAAAC,OAAYP,EAAZ,QACTQ,gBAAe,OAAAD,OAASP,EAAT,qBAeNS,EA7BW,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,gBAAiBC,EAAcF,EAAdE,QAC5C,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAG,OAAgBK,EAAU,UAAY,OACjDC,MAAMC,KAAKD,MAAMF,IAAkBI,IAAI,SAACC,EAAGC,GAAJ,OACtChB,EAAAC,EAAAC,cAACe,EAAD,CAAQC,IAAKF,EAAGjB,SAAe,IAAJiB,EAAWN,QCQ/BS,SAXH,WAEV,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAe,CAAEV,gBAHE,KAIpBV,EAAAC,EAAAC,cAACkB,EAAe,CAAEV,gBAJE,GAIeC,SAAS,IAC5CX,EAAAC,EAAAC,cAACmB,EAAD,SAOAC,EAAQ,kBACZtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,4BAAR,uBAGJvB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,qBACY,IACVF,EAAAC,EAAAC,cAAA,KACEqB,KAAK,mBACLC,MAAM,uCAFR,QAKK,IAPP,yCAQyC,IACvCxB,EAAAC,EAAAC,cAAA,QAAMsB,MAAM,+BAAZ,QATF,MAS+D,IAC7DxB,EAAAC,EAAAC,cAAA,KACEqB,KAAK,uCACLC,MAAM,6BAFR,6BAVF,sEAmBFxB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,6CACoC,IAClCF,EAAAC,EAAAC,cAAA,KACEqB,KAAK,mBACLC,MAAM,uDAFR,kCCvCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e3c341e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ColorWheel.css\";\n\nexport const ColorWheel = ({ numberOfRadials, reverse }) => {\n  return (\n    <div className={`ColorWheel ${reverse ? \"reverse\" : null}`}>\n      {Array.from(Array(numberOfRadials)).map((_, i) => (\n        <Radial key={i} rotation={(i * 360) / numberOfRadials} />\n      ))}\n    </div>\n  );\n};\nexport const Radial = ({ rotation }) => (\n  <div\n    className=\"Radial\"\n    style={{\n      transform: `rotate(${rotation}deg)`,\n      backgroundColor: `hsl(${rotation}, 100%, 50%)`\n    }}\n  />\n);\nexport const RadialCountSlider = ({ numberOfRadials, handleRangeChange }) => (\n  <input\n    id=\"RadialCountSlider\"\n    type=\"range\"\n    value={numberOfRadials}\n    min={0}\n    max={360}\n    onChange={handleRangeChange}\n  />\n);\n\nexport default ColorWheel;\n","import React from \"react\";\nimport ColorWheel from \"./components/ColorWheel\";\nimport \"./App.css\";\n\nconst App = () => {\n  const numberOfRadials = 13;\n  return (\n    <div className=\"App\">\n      <ColorWheel {...{ numberOfRadials }} />\n      <ColorWheel {...{ numberOfRadials, reverse: true }} />\n      <About />\n    </div>\n  );\n};\n\nexport default App;\n\nconst About = () => (\n  <div className=\"About\">\n    <article>\n      <header>\n        <div className=\"title\">David Rose</div>\n        <div className=\"email\">\n          <a href=\"mailto:doppler@gmail.com\">doppler@gmail.com</a>\n        </div>\n      </header>\n      <section>\n        <header>2014 - present:</header>\n        <p>\n          Full-time{\" \"}\n          <a\n            href=\"https://uspa.org\"\n            title=\"United States Parachute Association\"\n          >\n            USPA\n          </a>{\" \"}\n          skydiving instructor, videographer and{\" \"}\n          <abbr title=\"Safety and Training Advisor\">S&amp;TA</abbr> at{\" \"}\n          <a\n            href=\"https://atlanta.skydivespaceland.com\"\n            title=\"Skydive Spaceland Atlanta\"\n          >\n            Skydive Spaceland Atlanta\n          </a>\n          , holding Tandem, AFF, Static Line and IAD instructional ratings.\n        </p>\n      </section>\n      <section>\n        <header>1999 - 2014:</header>\n        <p>\n          Lead web application developer at{\" \"}\n          <a\n            href=\"https://sxsw.com\"\n            title=\"South by Southwest Conferences and Festivals (SXSW)\"\n          >\n            South by Southwest (SXSW)\n          </a>\n        </p>\n      </section>\n    </article>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}